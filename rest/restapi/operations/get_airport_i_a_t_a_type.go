// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAirportIATATypeHandlerFunc turns a function with the right signature into a get airport i a t a type handler
type GetAirportIATATypeHandlerFunc func(GetAirportIATATypeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAirportIATATypeHandlerFunc) Handle(params GetAirportIATATypeParams) middleware.Responder {
	return fn(params)
}

// GetAirportIATATypeHandler interface for that can handle valid get airport i a t a type params
type GetAirportIATATypeHandler interface {
	Handle(GetAirportIATATypeParams) middleware.Responder
}

// NewGetAirportIATAType creates a new http.Handler for the get airport i a t a type operation
func NewGetAirportIATAType(ctx *middleware.Context, handler GetAirportIATATypeHandler) *GetAirportIATAType {
	return &GetAirportIATAType{Context: ctx, Handler: handler}
}

/*GetAirportIATAType swagger:route GET /airport/{IATA}/{type} getAirportIATAType

GetAirportIATAType get airport i a t a type API

*/
type GetAirportIATAType struct {
	Context *middleware.Context
	Handler GetAirportIATATypeHandler
}

func (o *GetAirportIATAType) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAirportIATATypeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
